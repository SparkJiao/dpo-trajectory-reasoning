defaults:
  - hydra: default
#  - deepspeed@ds_cfg: train_hybrid_engine_zero1_optim_offload
  - deepspeed@ds_cfg: train_hybrid_engine_zero2
  - _self_  # see here for more details: https://hydra.cc/docs/tutorials/basic/your_first_app/defaults/#composition-order-of-primary-config

hydra:
  searchpath:
    - file://conf/


train_file: pretrained-models/Mixtral-8x7B-Instruct-v0.1/reclor.react.train.1shot.sample5.v1.0.clean_dpo.chosen.sub_train.json
dev_file: pretrained-models/Mixtral-8x7B-Instruct-v0.1/reclor.react.train.1shot.sample5.v1.0.clean_dpo.chosen.sub_dev.json
test_file:

torch_dtype:
  _target_: general_util.training_utils.return_torch_dtype
  dtype: bfloat16

tokenizer_init:
  _target_: general_util.tokenization_utils.init_tokenizer
  tokenizer_path: ${model_name_or_path}
  padding_side: left

model:
  _target_: models.llama.LlamaForCausalLM.from_pretrained
  gradient_checkpointing: True
  pad_token_id: 0
  attn_implementation: "flash_attention_2"
  torch_dtype: ${torch_dtype}
  device_map:
    _target_: models.llama.return_single_device_map


# Data loading
read_tensor:
  _target_: data.dpo.DPOSFTDataset
  original_data_file: ../research.data/reclor_data/train.json
  original_reader:
    _target_: data.reclor.ReClorReader
    flat_options: True
  instruction:
    _target_: data.prompts.logiqav2.react.prompts.get_prompt
    prompt_name: react_v2
  template: "Context:\n{}\n\nQuestion:\n{}\n\nOptions:\n{}\n\nThought 1: "
  compose_keys: [ "context", "question", "option_list" ]

dist_load_data_barrier: False

extended_vocab:

# Data collator
collator:
  _target_: data.dpo.DPODataSFTCollator
  tokenizer: ${tokenizer_init}
  max_seq_length: 2048

# Dataloader
num_workers: 8
prefetch_factor: 2

# Wiki path pretrain v8.2
model_name_or_path: pretrained-models/Llama-2-7b-chat-hf
pretrain:
resume:

exp_name: llama2.7b.chat.mixtral.dpo-sft.A100.40.w8.v1.0
exp_notes:
output_dir: experiments/${exp_name}  # Fix <pad token id>


do_train: True
evaluate_during_training: True

do_eval: True
eval_sub_path: checkpoint-100

# Training hyper-parameters
per_gpu_train_batch_size: 3
per_gpu_eval_batch_size: 6
#learning_rate: 1e-4
#learning_rate: 5e-6
learning_rate: 1e-5
gradient_accumulation_steps: 1
weight_decay: 0.01
adam_epsilon: 1e-6
adam_betas: "(0.9, 0.98)"
#adam_betas: "(0.9, 0.999)"
#max_grad_norm: 0.0
total_dataset_len: -1
max_grad_norm: 1.0
num_train_epochs: 6
max_steps: 0
warmup_proportion: 0.01
warmup_steps: 0

# Optimizer
optimizer:
use_nvlamb:
bit_training:

logging_steps: 5
save_ds_state: False
save_steps: 400
save_best: False
eval_steps: 400
ddp_eval: True
no_cuda: False
seed: 42
local_rank: -1
fp16: True
fp16_opt_level: O1
fp16_bfloat16: True

# Prediction config
prediction_cfg:
  metric: "loss"
  measure: -1
  best_checkpoint:
  best_result:
eval_forward_fn:
  _target_: general_util.evaluator.DefaultForwardFn
post_process:
  _target_: post_processors.dist_mixin.SFTLossOnlyPostProcessor

ds_cfg:
  train_micro_batch_size_per_gpu: ${per_gpu_train_batch_size}
  gradient_accumulation_steps: ${gradient_accumulation_steps}
  optimizer:
    type: AdamW
    params:
      lr: ${learning_rate}
      betas: [ 0.9, 0.95 ]
      weight_decay: ${weight_decay}



summary_helper:
  _target_: general_util.tensorboard_helper.WandbWriter
  batch_index_or_keys:
  outputs_index_or_keys:

# Temporary variables
n_gpu:
device:
train_batch_size:
eval_batch_size:
world_size:
